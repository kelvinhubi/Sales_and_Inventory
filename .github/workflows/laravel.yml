name: Laravel CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    env:
      COMPOSER_NO_INTERACTION: 1
      COMPOSER_PROCESS_TIMEOUT: 300

    name: PHP 8.4 - stable

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.composer/cache/files
        key: dependencies-php-8.4-composer-${{ hashFiles('composer.json') }}
        restore-keys: |
          dependencies-php-8.4-composer-

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, mysql, pdo_mysql
        coverage: xdebug

    - name: Setup Node.js (if package.json exists)
      if: hashFiles('package.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache Node modules (if package.json exists)
      if: hashFiles('package.json') != ''
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Set Environment Variables
      run: |
        echo "APP_ENV=testing" >> .env
        echo "APP_DEBUG=true" >> .env
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=database/database.sqlite" >> .env
        echo "CACHE_DRIVER=array" >> .env
        echo "SESSION_DRIVER=array" >> .env
        echo "QUEUE_CONNECTION=sync" >> .env

    - name: Install Composer Dependencies
      timeout-minutes: 10
      run: |
        composer install --no-ansi --no-interaction --no-progress --optimize-autoloader

    - name: Clear Composer Cache (if needed)
      run: composer clear-cache || echo "Cache clear completed"

    - name: Verify Composer Autoload
      run: composer dump-autoload --optimize --no-interaction

    - name: Run Laravel Package Discovery
      timeout-minutes: 5
      env:
        COMPOSER_NO_INTERACTION: 1
        APP_ENV: testing
      run: |
        echo "Running package discovery..."
        php artisan package:discover --ansi 2>&1 || echo "Package discovery completed with warnings"
        echo "Running config cache..."
        php artisan config:cache 2>&1 || echo "Config cache completed"
        echo "Laravel setup completed successfully"

    - name: Install NPM Dependencies (if package.json exists)
      if: hashFiles('package.json') != ''
      run: npm install

    - name: Build Assets (if package.json exists and has build script)
      if: hashFiles('package.json') != ''
      run: |
        if npm run --silent build 2>/dev/null; then
          npm run build
        else
          echo "No build script found in package.json, skipping asset build"
        fi

    - name: Generate Application Key
      run: php artisan key:generate

    - name: Set Directory Permissions
      run: |
        chmod -R 755 storage
        chmod -R 755 bootstrap/cache
        chmod -R 755 database

    - name: Create SQLite Database
      run: |
        mkdir -p database
        touch database/database.sqlite
        chmod 664 database/database.sqlite

    - name: Verify Laravel Installation
      run: |
        php artisan --version
        php artisan config:show app.name || echo "Config check completed"

    - name: Clear Config Cache
      run: |
        php artisan config:clear
        php artisan cache:clear || echo "Cache clear completed"

    - name: Run Database Migrations (SQLite)
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: |
        php artisan migrate:status || echo "No migrations found"
        php artisan migrate --force

    - name: Execute Tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan test --coverage --coverage-clover=coverage.xml

    - name: Upload coverage reports to Codecov
      if: ${{ env.CODECOV_TOKEN != '' }}
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ env.CODECOV_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'

    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run Security Checker
      run: composer audit

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'

    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run PHP CS Fixer (Code Style)
      run: |
        if ! composer show friendsofphp/php-cs-fixer > /dev/null 2>&1; then
          composer require --dev friendsofphp/php-cs-fixer
        fi
        vendor/bin/php-cs-fixer fix --dry-run --diff --allow-risky=yes

    - name: Run PHPStan (Static Analysis)
      run: |
        if ! composer show phpstan/phpstan > /dev/null 2>&1; then
          composer require --dev phpstan/phpstan
        fi
        vendor/bin/phpstan analyse --memory-limit=2G --no-progress
